diff --git a/dist/esm/generator/schema.mjs b/dist/esm/generator/schema.mjs
index ad3ef5e7c80f9dacc53be7410f16c50690736304..5f9fa80ae3eac111554ad02264eaed5523075880 100644
--- a/dist/esm/generator/schema.mjs
+++ b/dist/esm/generator/schema.mjs
@@ -40,6 +40,23 @@ export const getParameterObjects = (schema, required, pathParameters, headersSch
                 }
             }
             else {
+                console.error(`Some details regarding the error: ${JSON.stringify({
+                    shapeKey,
+                    zodSupportsCoerce,
+                    shapeSchema,
+                    isPathParameter,
+                    isShapeRequired,
+                    pathParameters,
+                    test: 'coerce' in z,
+                    keys: Object.keys(z),
+                }, null, 2)}`)
+                console.log("--- Diagnostics for myZodInstance ---");
+                console.log("'coerce' in myZodInstance:", 'coerce' in z); // You say this is false
+                console.log("Object.keys(myZodInstance):", Object.keys(z)); // You say this includes 'coerce'
+                console.log("Value of myZodInstance['coerce']:", z['coerce']); // WHAT DOES THIS PRINT??
+                console.log("typeof myZodInstance['coerce']:", typeof z['coerce']);
+                console.log('other check for coerce (should be true):', z.coerce.boolean().def.coerce)
+                console.log('other check for coerce (should be false):', z.number().def.coerce)
                 throw new TRPCError({
                     message: `Input parser key: "${shapeKey}" must be ZodString`,
                     code: 'INTERNAL_SERVER_ERROR',
diff --git a/dist/esm/utils/zod.mjs b/dist/esm/utils/zod.mjs
index a3fda1a5b5403a659bfc70653a94102e607f8b80..070d9728f9b41add50e5d30d3aa559be91018ccd 100644
--- a/dist/esm/utils/zod.mjs
+++ b/dist/esm/utils/zod.mjs
@@ -62,7 +62,7 @@ export const instanceofZodTypeLikeString = (_type) => {
     }
     return instanceofZodTypeKind(type, 'string');
 };
-export const zodSupportsCoerce = 'coerce' in z;
+export const zodSupportsCoerce = true //'coerce' in z;
 export const instanceofZodTypeCoercible = (_type) => {
     const type = unwrapZodType(_type, false);
     return (instanceofZodTypeKind(type, 'number') ||
