name: "[Deployment] Release"

on:
  push:
    branches:
      - main
      - beta
      - dev
  workflow_dispatch:
    inputs:
      send-notifications:
        type: boolean
        required: false
        default: true
        description: Send notifications

permissions:
  contents: write # Required to update package.json version
  packages: write # Required for pushing to GHCR
  actions: write # Required for uploading/downloading artifacts

env:
  SKIP_ENV_VALIDATION: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TURBO_TELEMETRY_DISABLED: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}

jobs:
  release:
    name: Create tag and release
    runs-on: ubuntu-latest
    env:
      SKIP_RELEASE: ${{ github.event_name == 'workflow_dispatch' || github.ref_name == 'dev' }}
    outputs:
      version: ${{ steps.read-semver.outputs.version || steps.version-fallback.outputs.version }}
      git_ref: ${{ steps.read-git-ref.outputs.ref || github.ref }}

    steps:
      - run: echo "Skipping release for workflow_dispatch event"
        if: env.SKIP_RELEASE == 'true'
        # The below generated version fallback represents a normalized branch name, for example "feature/branch-name" -> "feature-branch-name"
      - run: echo "version="$(echo ${{github.ref_name}} | sed 's/[^a-zA-Z0-9\-]/-/g') >> "$GITHUB_OUTPUT"
        id: version-fallback
        if: env.SKIP_RELEASE == 'true' && github.ref_name != 'main' && github.ref_name != 'beta'

      - name: Obtain token
        if: env.SKIP_RELEASE == 'false'
        id: obtainToken
        uses: tibdex/github-app-token@v2
        with:
          private_key: ${{ secrets.RENOVATE_MERGE_PRIVATE_KEY }}
          app_id: ${{ secrets.RENOVATE_MERGE_APP_ID }}
      - uses: actions/checkout@v4
        if: env.SKIP_RELEASE == 'false'
        with:
          persist-credentials: false
      - uses: actions/setup-node@v4
        if: env.SKIP_RELEASE == 'false'
        with:
          node-version: 22
      - run: npm i -g pnpm
        if: env.SKIP_RELEASE == 'false'
      - name: Install dependencies
        if: env.SKIP_RELEASE == 'false'
        run: |
          pnpm install
      - name: Run Semantic Release
        if: env.SKIP_RELEASE == 'false'
        env:
          GITHUB_TOKEN: ${{ steps.obtainToken.outputs.token }}
          GIT_AUTHOR_NAME: "Releases Homarr"
          GIT_AUTHOR_EMAIL: "175486441+homarr-releases[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "Releases Homarr"
          GIT_COMMITTER_EMAIL: "175486441+homarr-releases[bot]@users.noreply.github.com"
        run: |
          pnpm release
      - name: Read semver output
        # We read the last tag either from the created release or from the current branch, this is to rerun the deployment job for the currently released version when it failed
        if: env.SKIP_RELEASE == 'false' || github.ref_name == 'main' || github.ref_name == 'beta'
        id: read-semver
        run: |
          git fetch --tags
          echo "version=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
      - name: Read git ref
        if: env.SKIP_RELEASE == 'false'
        id: read-git-ref
        run: |
          echo "ref=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      - name: Update dev branch
        if: env.SKIP_RELEASE == 'false'
        continue-on-error: true # Prevent pipeline from failing when merge fails
        env:
          GITHUB_TOKEN: ${{ steps.obtainToken.outputs.token }}
        run: |
          git config user.name "Releases Homarr"
          git config user.email "175486441+homarr-releases[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin dev
          git checkout dev
          git pull origin dev
          git rebase ${{ github.ref_name }}
          git push origin dev
  build-amd64:
    name: Build docker image for amd64
    needs: release
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-image.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.git_ref }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: .
          load: true
          push: false # Never push the image here, we will push it in a later step
          tags: homarr-amd64
          network: host
        env:
          SKIP_ENV_VALIDATION: true
      - name: Create image artifact
        run: docker save -o image-amd64.tar homarr-amd64
      - name: Upload image artifact
        id: upload-image
        uses: actions/upload-artifact@v4
        with:
          name: image-amd64
          path: image-amd64.tar
          retention-days: 1

  build-arm64:
    name: Build docker image for arm64
    needs: release
    runs-on: ubuntu-24.04-arm
    outputs:
      artifact-id: ${{ steps.upload-image.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.git_ref }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          context: .
          load: true
          push: false # Never push the image here, we will push it in a later step
          tags: homarr-arm64
          network: host
        env:
          SKIP_ENV_VALIDATION: true
      - name: Create image artifact
        run: docker save -o image-arm64.tar homarr-arm64
      - name: Upload image artifact
        id: upload-image
        uses: actions/upload-artifact@v4
        with:
          name: image-arm64
          path: image-arm64.tar
          retention-days: 1

  push:
    name: Complete deployment and notify
    needs: [release, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    env:
      NEXT_VERSION: ${{ needs.release.outputs.version }}
      DEPLOY_LATEST: ${{ github.ref_name == 'main' }}
      DEPLOY_BETA: ${{ github.ref_name == 'beta' }}
    steps:
      - name: Download amd64 image artifact
        uses: actions/download-artifact@v4
        with:
          name: image-amd64
          path: .
      - name: Load amd64 image artifact
        run: docker load -i image-amd64.tar
      - name: Download arm64 image artifact
        uses: actions/download-artifact@v4
        with:
          name: image-arm64
          path: .
      - name: Load arm64 image artifact
        run: docker load -i image-arm64.tar
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag images
        run: |
          docker tag homarr-amd64 "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:homarr-amd64"
          docker tag homarr-arm64 "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:homarr-arm64"
      - name: Push beta
        if: env.DEPLOY_BETA == 'true'
        run: |
          docker manifest create "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:beta" homarr-amd64 homarr-arm64
          docker manifest push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:beta"
      - name: Push latest
        if: env.DEPLOY_LATEST == 'true'
        run: |
          docker manifest create "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" homarr-amd64 homarr-arm64
          docker manifest push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
      - name: Push version
        run: |
          docker manifest create "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEXT_VERSION }}" homarr-amd64 homarr-arm64
          echo "Created manifest successfully"
          echo $(docker manifest inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEXT_VERSION }}")
          docker manifest push "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEXT_VERSION }}"

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "Successfully deployed images for branch **${{ github.ref_name }}**. Tagged as **${{env.NEXT_VERSION}}**."

  cleanup:
    name: Cleanup artifacts
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64, push]
    steps:
      - name: Remove amd64 artifact
        if: always()
        continue-on-error: true # Ignore if unable to remove artifacts
        run: |
          curl -X DELETE --silent --location --user ${{github.actor}}:${{secrets.GITHUB_TOKEN}} https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ needs.build-amd64.outputs.artifact-id }}
      - name: Remove arm64 artifact
        if: always()
        continue-on-error: true # Ignore if unable to remove artifacts
        run: |
          curl -X DELETE --silent --location --user ${{github.actor}}:${{secrets.GITHUB_TOKEN}} https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ needs.build-arm64.outputs.artifact-id }}
